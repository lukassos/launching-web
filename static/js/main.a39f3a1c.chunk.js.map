{"version":3,"sources":["startup.svg","components/NavBar.js","components/InfoSection.js","components/LaunchingFalcon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","react_default","a","createElement","react_router_dom","mdbreact_esm","color","dark","expand","src","className","style","height","padding","margin","alt","right","href","icon","InfoSection","LaunchingFalcon","index_esm","videoId","opts","width","playerVars","autoplay","controls","rel","showinfo","onReady","this","_onReady","event","target","pauseVideo","React","Component","App","components_NavBar","components_InfoSection","components_LaunchingFalcon","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,wKC8BzBC,EAvBA,WACX,OACFC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAWC,MAAM,oBAAoBC,MAAI,EAACC,OAAO,MAC3CP,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACNJ,EAAAC,EAAAC,cAAA,OAAKM,IAAI,wBAAwBC,UAAU,YACzCC,MAAO,CAAEC,OAAQ,OAAQC,QAAS,EAAGC,OAAQ,IAAMC,IAAI,KAFnD,kBAKNd,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcW,OAAK,GACnBf,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAYK,UAAU,4BAErBT,EAAAC,EAAAC,cAAA,KAAGc,KAAK,gCAAgCP,UAAU,cAChDT,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASa,KAAK,KAAKR,UAAU,SAD/B,oBCgBUS,EAhCK,WAClB,OACElB,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAcK,UAAU,oBACtBT,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAAA,MAAIO,UAAU,gBAAd,kBACTT,EAAAC,EAAAC,cAAA,KAAGO,UAAU,QAAb,2CAGST,EAAAC,EAAAC,cAAA,MAAIO,UAAU,SACdT,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,KAAGO,UAAU,aACXT,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAAA,mDAGNF,EAAAC,EAAAC,cAAA,KAAGO,UAAU,QACXT,EAAAC,EAAAC,cAAA,KAAGO,UAAU,eAAeO,KAAK,iCAAjC,gBAGXhB,EAAAC,EAAAC,cAAA,KAAGO,UAAU,QAAb,0FCOYU,mLAfX,OACEnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CACEC,QAAQ,cACRC,KAhBS,CACXX,OAAQ,MACRY,MAAO,OACPC,WAAY,CACVC,SAAU,EACXC,SAAU,EACVC,IAAK,EACLC,SAAU,IAUTC,QAASC,KAAKC,4CAKXC,GAEPA,EAAMC,OAAOC,oBA1BaC,IAAMC,WCgBrBC,MAVf,WACE,OACErC,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OAChBT,EAAAC,EAAAC,cAACoC,EAAD,MACEtC,EAAAC,EAAAC,cAACqC,EAAD,MACAvC,EAAAC,EAAAC,cAACsC,EAAD,QCFeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6ECRNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a39f3a1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/startup.fafbb619.svg\";","import React from 'react';\nimport {\nMDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBFormInline,\nMDBDropdown, MDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBIcon\n} from \"mdbreact\";\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst NavBar = () => {\n    return(\n\t\t<Router>\n\t \t\t<MDBNavbar color=\"unique-color-dark\" dark expand=\"md\">\n\t\t        <MDBNavbarBrand>\n\t\t\t\t<img src=\"lupu_line_logo_wh.png\" className=\"z-depth-0\"\n\t\t\t\t  style={{ height: \"35px\", padding: 0, margin: 10 }} alt=\"\" />\n                LuPu Solutions\n\t\t        </MDBNavbarBrand>\n\t\t\t\t<MDBNavbarNav right>\n\t\t\t\t<MDBNavItem className=\"waves-effect waves-light\">\n\n\t\t\t\t\t<a href=\"mailto:lukas.puchon@gmail.com\" className=\"white-text\" >\n\t\t\t\t\t\t\t<MDBIcon icon=\"at\" className=\"mr-1\" /> Contact us\n\t\t\t\t\t</a>\n\n\t\t\t\t</MDBNavItem>\n\t\t\t\t</MDBNavbarNav>\n      \t\t</MDBNavbar>\n    \t</Router>\n    )\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { MDBJumbotron, MDBBtn, MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\n\nconst InfoSection = () => {\n  return (\n    <MDBContainer className=\"mt-5 text-center\">\n      <MDBRow>\n        <MDBCol>\n          <MDBJumbotron>\n            <h2 className=\"h1 display-3\">LuPu Solutions</h2>\n\t\t\t<p className=\"lead\">\n              Your business boost from IT perspective\n            </p>\n            <hr className=\"my-2\" />\n            <MDBCol>\n                <p className=\"text-left\" >\n                  <li>IT consulting and coding</li>\n                  <li>Full stack mobile and web applications</li>\n                  <li>Security of virtual identity</li>\n                  <li>Computer vision and neural networks</li>\n                </p>\n            </MDBCol>\n            <p className=\"lead\">\n              <a className=\"btn btn-dark\" href='mailto:lukas.puchon@gmail.com'  >Contact us</a>\n            </p>\n          </MDBJumbotron>\n\t\t\t<p className=\"lead\">\n              How far can you go in few seconds?\n            </p>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  )\n}\n\nexport default InfoSection;\n","import React from 'react';\nimport YouTube from 'react-youtube';\n\nclass LaunchingFalcon extends React.Component {\n  render() {\n    const opts = {\n      height: '720',\n      width: '1280',\n      playerVars: { // https://developers.google.com/youtube/player_parameters\n        autoplay: 1,\n\t      controls: 0,\n\t      rel: 0,\n\t      showinfo: 0\n\t\t}\n\t\t// ,\n\t  // start: 1166\n    };\n\n    return (\n      <YouTube\n        videoId=\"Dorv9A8M8HM\"\n        opts={opts}\n        onReady={this._onReady}\n      />\n    );\n  }\n\n  _onReady(event) {\n    // access to player in all event handlers via event.target\n    event.target.pauseVideo();\n  }\n}\n\nexport default LaunchingFalcon;\n","import React from 'react';\nimport logo from './startup.svg';\nimport './App.css';\n\nimport NavBar from './components/NavBar.js'\nimport InfoSection from './components/InfoSection.js'\n\nimport LaunchingFalcon from './components/LaunchingFalcon.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t \t<NavBar />\n\t    <InfoSection />\n    \t<LaunchingFalcon />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}